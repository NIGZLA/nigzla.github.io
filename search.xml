<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>maven的windows环境、仓库、镜像源配置</title>
      <link href="/2024/06/03/maven%E7%9A%84windows%E7%8E%AF%E5%A2%83%E3%80%81%E4%BB%93%E5%BA%93%E3%80%81%E9%95%9C%E5%83%8F%E6%BA%90%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/06/03/maven%E7%9A%84windows%E7%8E%AF%E5%A2%83%E3%80%81%E4%BB%93%E5%BA%93%E3%80%81%E9%95%9C%E5%83%8F%E6%BA%90%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="maven的windows环境、仓库、镜像源配置"><a href="#maven的windows环境、仓库、镜像源配置" class="headerlink" title="maven的windows环境、仓库、镜像源配置"></a>maven的windows环境、仓库、镜像源配置</h1><h3 id="1-进入Maven下载官网"><a href="#1-进入Maven下载官网" class="headerlink" title="1.进入Maven下载官网"></a>1.进入<a href="https://maven.apache.org/download.cgi">Maven下载</a>官网</h3><p>这边建议下载编译后的</p><p><img src="/../image/image-20240603195401087.png" alt="image-20240603195401087"></p><p>下载完成后解压到<strong>合适</strong>（看自己）目录</p><p><img src="/../image/image-20240603195550272.png" alt="image-20240603195550272"></p><p>我这边习惯大包包小包，所以会删除前缀</p><p><img src="/../image/image-20240603195657396.png" alt="image-20240603195657396"></p><p>像JDK一样</p><h3 id="2-设置本地仓库位置"><a href="#2-设置本地仓库位置" class="headerlink" title="2.设置本地仓库位置"></a>2.设置本地仓库位置</h3><ul><li><p>找到目录<code>conf</code>下的<code>settings.xml</code></p><p><img src="/../image/image-20240603200010042.png" alt="image-20240603200010042"></p></li><li><p>使用编辑器打开</p></li><li><p>首先找到文本中<code>settings</code>部分</p><ul><li><img src="/../image/image-20240603200318756.png" alt="image-20240603200318756"></li><li>可以看到默认的maven仓库会存储在 C盘当前用户下创建&#x2F;.m2&#x2F;repository</li><li>对于C盘容量太小或者不习惯的小伙伴是非常不友好的</li><li><img src="/../image/image-20240603200943131.png" alt="image-20240603200943131"></li><li>所以我们可以将原本注释部分的<code>&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code>部分复制下来并更改相应路径</li></ul></li></ul><h3 id="3-设置镜像源"><a href="#3-设置镜像源" class="headerlink" title="3.设置镜像源"></a>3.设置镜像源</h3><ul><li><p>还是一样，找到目录<code>conf</code>下的<code>settings.xml</code></p></li><li><p>使用编辑器打开</p></li><li><p>找到<code>&lt;mirrors&gt;</code>部分</p><ul><li><p>默认只有国外的maven镜像源，因为下载慢，所以<code>可以</code>并<code>建议</code>添加国内相应的镜像源</p></li><li><p><img src="/../image/image-20240603201226437.png" alt="image-20240603201226437"></p></li><li><p>这边已经准备好</p><ul><li><p>！！！放入<code>&lt;mirrors&gt;&lt;/mirrors&gt;</code>标签内</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--阿里云 Maven 镜像--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--华为云 Maven 镜像--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>huaweicloud<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.huaweicloud.com/repository/maven/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--清华大学 TUNA Maven 镜像--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>tuna<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>TUNA Maven Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mirrors.tuna.tsinghua.edu.cn/maven/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--中国科学技术大学 USTC Maven 镜像--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>ustc<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>USTC Maven Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mirrors.ustc.edu.cn/maven/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Maven Central Repository 官方镜像--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>依赖会依次从<code>阿里云 Maven 镜像</code>，<code>华为云 Maven 镜像</code>，<code>清华大学 TUNA Maven 镜像</code>，<code>中国科学技术大学 USTC Maven 镜像</code>，依次查找，如果都没有最后再去<code>Maven Central Repository 官方镜像</code>查找</p></li></ul></li></ul></li></ul><h3 id="4-添加环境变量（可以不）"><a href="#4-添加环境变量（可以不）" class="headerlink" title="4.添加环境变量（可以不）"></a>4.添加环境变量（可以不）</h3><ul><li>找到maven的解压目录<ul><li><img src="/../image/image-20240603202108841.png" alt="image-20240603202108841"></li><li>复制路径</li></ul></li><li>打开系统的环境变量<ul><li><img src="/../image/image-20240603202515681.png" alt="image-20240603202515681"></li></ul></li><li>点击新建<ul><li>填入相应值</li><li><img src="/../image/image-20240603202218982.png" alt="image-20240603202218982"></li><li>注意！变量值需要根据自己电脑解压maven路径来！！！</li></ul></li><li>选择<code>Path</code>点击编辑<ul><li><img src="/../image/image-20240603202558866.png" alt="image-20240603202558866"></li></ul></li><li>添加 <code>%MAVEN_HOME%\bin</code>后点击确定<ul><li><img src="/../image/image-20240603202736156.png" alt="image-20240603202736156"></li></ul></li></ul><h3 id="5完成"><a href="#5完成" class="headerlink" title="5完成"></a>5完成</h3><p>完成后可在cmd窗口中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure><p>来验证是否配置成功</p><p><img src="/../image/image-20240603202925506.png" alt="image-20240603202925506"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis核心配置文件</title>
      <link href="/2024/05/29/Mybatis%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2024/05/29/Mybatis%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis核心配置文件"><a href="#Mybatis核心配置文件" class="headerlink" title="Mybatis核心配置文件"></a>Mybatis核心配置文件</h1><h2 id="环境配置（environments）"><a href="#环境配置（environments）" class="headerlink" title="环境配置（environments）"></a><a href="https://mybatis.org/mybatis-3/zh_CN/configuration.html#%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%EF%BC%88environments%EF%BC%89">环境配置（environments）</a></h2><ol><li>environments:配置数据库环境信息，可配置多个environments，通过default切换不同的environments</li><li>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。<ul><li>可通过<code>default</code>切换<code>environments</code>来切换不同的数据源（例如不同的开发数据库与测试数据库）<img src="/../image/image-20240329213011139.png" alt="image-20240329213011139"></li></ul></li></ol><h2 id="类型别名（typeAliases）"><a href="#类型别名（typeAliases）" class="headerlink" title="类型别名（typeAliases）"></a><a href="https://mybatis.org/mybatis-3/zh_CN/configuration.html#%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D%EF%BC%88typealiases%EF%BC%89">类型别名（typeAliases）</a></h2><ol><li>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Author&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Blog&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Blog&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Comment&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Comment&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Post&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Post&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Section&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Section&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Tag&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Tag&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>设置别名后</li></ol><ul><li><p><img src="/../image/image-20240329214121614.png" alt="image-20240329214121614"><img src="/../image/image-20240329214144769.png" alt="image-20240329214144769"></p></li><li><p>既可简化配置不区分大小写和不带包的名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.mybatis.pojo.User;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>当这样配置时，<code>User</code> 可以用在任何使用 <code>com.mybatis.pojo</code> 的地方.也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="细节：配置各个标签时，需要遵守前后顺序"><a href="#细节：配置各个标签时，需要遵守前后顺序" class="headerlink" title="细节：配置各个标签时，需要遵守前后顺序"></a>细节：配置各个标签时，需要遵守前后顺序</h1><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：</p><ul><li>configuration（配置）<ul><li><a href="https://mybatis.org/mybatis-3/zh_CN/configuration.html#properties">properties（属性）</a></li><li><a href="https://mybatis.org/mybatis-3/zh_CN/configuration.html#settings">settings（设置）</a></li><li><a href="https://mybatis.org/mybatis-3/zh_CN/configuration.html#typeAliases">typeAliases（类型别名）</a></li><li><a href="https://mybatis.org/mybatis-3/zh_CN/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh_CN/configuration.html#objectFactory">objectFactory（对象工厂）</a></li><li><a href="https://mybatis.org/mybatis-3/zh_CN/configuration.html#plugins">plugins（插件）</a></li><li>environments（环境配置）<ul><li>environment（环境变量）<ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li><a href="https://mybatis.org/mybatis-3/zh_CN/configuration.html#databaseIdProvider">databaseIdProvider（数据库厂商标识）</a></li><li><a href="https://mybatis.org/mybatis-3/zh_CN/configuration.html#mappers">mappers（映射器）</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mapper代理开发</title>
      <link href="/2024/05/29/Mapper%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91/"/>
      <url>/2024/05/29/Mapper%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Mapper代理开发"><a href="#Mapper代理开发" class="headerlink" title="Mapper代理开发"></a>Mapper代理开发</h1><p>在Mybatis原生代码中，原生代码还是存在一些硬编码，使用Mapper代理开发可简化后期执行SQL。</p><p>​所以通过使用Mapper代理开发，会更加方便</p><p><img src="/../image/image-20240329105537803.png" alt="image-20240329105537803"></p><h1 id="使用Mapper代理开发流程"><a href="#使用Mapper代理开发流程" class="headerlink" title="使用Mapper代理开发流程"></a>使用Mapper代理开发流程</h1><ol><li><h3 id="定义与SQL映射文件同名的Mapper接口，将Mapper接口和SQL映射文件位置放在同一目录下"><a href="#定义与SQL映射文件同名的Mapper接口，将Mapper接口和SQL映射文件位置放在同一目录下" class="headerlink" title="定义与SQL映射文件同名的Mapper接口，将Mapper接口和SQL映射文件位置放在同一目录下"></a>定义与SQL映射文件同名的Mapper接口，将Mapper接口和SQL映射文件位置放在同一目录下</h3><ul><li>在<code>resources</code>下创建与<code>java</code>目录下<code>com.xxx.mapper</code>一致</li><li><code>resources</code>下创建时为<code>com/xxx/mapper</code></li><li><img src="/../image/image-20240329113449014.png" alt="image-20240329113449014"></li></ul></li><li><h3 id="设置SQL映射文件的namespace属性为Mapper接口全限定名"><a href="#设置SQL映射文件的namespace属性为Mapper接口全限定名" class="headerlink" title="设置SQL映射文件的namespace属性为Mapper接口全限定名"></a>设置SQL映射文件的namespace属性为Mapper接口全限定名</h3><p><img src="/../image/image-20240329113827938.png" alt="image-20240329113827938"></p><p><img src="/../image/image-20240329114012968.png" alt="image-20240329114012968"></p><ul><li>这边推荐IDE中MybatisX插件 可用来快速跳转和探究是否已映射上</li></ul></li><li><h3 id="在Maooer接口中定义方法，方法名为SQL映射文件中sql语句的ID，并保持参数类型和返回值一致"><a href="#在Maooer接口中定义方法，方法名为SQL映射文件中sql语句的ID，并保持参数类型和返回值一致" class="headerlink" title="在Maooer接口中定义方法，方法名为SQL映射文件中sql语句的ID，并保持参数类型和返回值一致"></a>在Maooer接口中定义方法，方法名为SQL映射文件中sql语句的ID，并保持参数类型和返回值一致</h3><ul><li><p>在Mapper接口中需要创建与SQLID同名的方法<img src="/../image/image-20240329125042549.png" alt="image-20240329125042549"></p><ul><li><h5 id="获取userMapper接口的代理对象"><a href="#获取userMapper接口的代理对象" class="headerlink" title="获取userMapper接口的代理对象"></a>获取userMapper接口的代理对象<img src="/../image/image-20240329130823652.png" alt="image-20240329130823652"></h5></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        1.加载mybatis核心配置文件，获取SqlSessionFactory Mybatis官方网站有</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;<span class="comment">//mybatis相对路径</span></span><br><span class="line">        <span class="comment">//获取inputStream通过Resources对象（资源加载类）getResourceAsStream(resource)将字符串传进来 返回一个字节输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="comment">//通过SqlSessionFactoryBuilder()对象的build()方法将流传进来返回SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2.获取SqlSessionFactory对象 执行sql语句</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3.获取userMapper接口的代理对象</span></span><br><span class="line">        <span class="comment">//session.getMapper(UserMapper.class);</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectAll();</span><br><span class="line">        System.out.println(userList);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        4.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h5 id="注意-mybatis-config-xml中的映射路径-所以这种方式在后期Mapper文件多了之后会极其繁琐-UserMapper-OrderMapper-PhoneMapper-随着业务的增加"><a href="#注意-mybatis-config-xml中的映射路径-所以这种方式在后期Mapper文件多了之后会极其繁琐-UserMapper-OrderMapper-PhoneMapper-随着业务的增加" class="headerlink" title="注意 mybatis-config.xml中的映射路径 所以这种方式在后期Mapper文件多了之后会极其繁琐(UserMapper,OrderMapper,PhoneMapper)随着业务的增加"></a>注意 <code>mybatis-config.xml</code>中的映射路径 所以这种方式在后期Mapper文件多了之后会极其繁琐(UserMapper,OrderMapper,PhoneMapper)随着业务的增加<img src="/../image/image-20240329125158523.png" alt="image-20240329125158523"></h5></li><li><h5 id="所以后期多采用包扫描方式来进行扫描映射-所有Mapper映射都在-mapper文件夹下"><a href="#所以后期多采用包扫描方式来进行扫描映射-所有Mapper映射都在-mapper文件夹下" class="headerlink" title="所以后期多采用包扫描方式来进行扫描映射 所有Mapper映射都在&#x2F;mapper文件夹下"></a>所以后期多采用包扫描方式来进行扫描映射 所有Mapper映射都在&#x2F;mapper文件夹下<img src="/../image/image-20240329130615459.png" alt="image-20240329130615459"></h5></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis快速入门</title>
      <link href="/2024/05/28/Mybatis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2024/05/28/Mybatis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis快速入门"><a href="#Mybatis快速入门" class="headerlink" title="Mybatis快速入门"></a>Mybatis快速入门</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        1.加载mybatis核心配置文件，获取SqlSessionFactory Mybatis官方网站有</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;<span class="comment">//mybatis相对路径</span></span><br><span class="line">        <span class="comment">//获取inputStream通过Resources对象（资源加载类）getResourceAsStream(resource)将字符串传进来 返回一个字节输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="comment">//通过SqlSessionFactoryBuilder()对象的build()方法将流传进来返回SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2.获取SqlSessionFactory对象 执行sql语句</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3.执行sql语句</span></span><br><span class="line">          <span class="comment">//session.selectOne()</span></span><br><span class="line">          <span class="comment">//session.selectList(&quot;test.selectAll&quot;);</span></span><br><span class="line">        List&lt;User&gt; users = session.selectList(<span class="string">&quot;MapperDemo.selectAll&quot;</span>);</span><br><span class="line">        System.out.println(users);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        4.释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socked通信</title>
      <link href="/2024/05/28/Socked/"/>
      <url>/2024/05/28/Socked/</url>
      
        <content type="html"><![CDATA[<h1 id="Socked通信"><a href="#Socked通信" class="headerlink" title="Socked通信"></a>Socked通信</h1><ol><li><p><strong>导入必要的库</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br></pre></td></tr></table></figure></li><li><p><strong>创建客户端套接字</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line"><span class="type">Socket</span> <span class="variable">clientSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;服务器IP地址&quot;</span>, 端口号);</span><br></pre></td></tr></table></figure><p>例如，要连接到服务器IP地址为 “192.168.1.100”，端口号为 8080 的服务器，你可以使用以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Socket</span> <span class="variable">clientSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;192.168.1.100&quot;</span>, <span class="number">8080</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>创建服务器套接字</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(端口号);</span><br><span class="line"><span class="type">Socket</span> <span class="variable">clientSocket</span> <span class="operator">=</span> serverSocket.accept();</span><br></pre></td></tr></table></figure><p>这段代码创建了一个服务器套接字，绑定到指定的端口号上，并等待客户端的连接。一旦有客户端连接，<code>accept</code>方法将返回一个新的套接字用于与该客户端通信。</p></li><li><p><strong>获取输入和输出流</strong>： 你可以使用<code>getInputStream()</code>和<code>getOutputStream()</code>方法获取与套接字相关的输入和输出流，以进行数据的读取和写入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> clientSocket.getInputStream();</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">output</span> <span class="operator">=</span> clientSocket.getOutputStream();</span><br></pre></td></tr></table></figure></li><li><p><strong>读写数据</strong>： 使用获取的输入和输出流来进行数据的读取和写入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从输入流读取数据</span></span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">bytesRead</span> <span class="operator">=</span> input.read(buffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向输出流写入数据</span></span><br><span class="line"><span class="type">byte</span>[] data = <span class="string">&quot;Hello, Server&quot;</span>.getBytes();</span><br><span class="line">output.write(data);</span><br></pre></td></tr></table></figure></li><li><p><strong>关闭套接字和流</strong>： 当完成网络操作后，应该关闭套接字和流以释放资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clientSocket.close();</span><br><span class="line">input.close();</span><br><span class="line">output.close();</span><br></pre></td></tr></table></figure></li><li><p><strong>异常处理</strong>： 在网络编程中，许多操作可能引发异常，例如连接失败、IO异常等。因此，你应该使用异常处理机制来处理这些情况，以确保程序的稳定性。</p></li></ol><p>这些是使用Java中的<code>Socket</code>类进行基本网络操作的一般步骤。请注意，Java还提供了更高级的网络编程API，如<code>ServerSocket</code>用于构建服务器应用程序，<code>SocketChannel</code>用于非阻塞I&#x2F;O等。网络编程可以变得更复杂，具体取决于你的需求。在实际应用中，还需要考虑安全性、协议选择等方面的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2024/05/28/SpringBoot/"/>
      <url>/2024/05/28/SpringBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h1><h4 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h4><ul><li><p>Spring Boot提供了</p><ul><li><code>@Controller</code>和<code>@RestController</code></li><li>两种注解来标识此类负责接收和处理HTTP请求</li></ul></li><li><p>如果请求的是页面和数据，使用<code>@Controller</code>注解即可，如果只是请求数据则可以使用<code>@RestController</code>注解</p></li></ul><h4 id="路由映射"><a href="#路由映射" class="headerlink" title="路由映射"></a>路由映射</h4><ul><li><code>@RequestMapping</code>的<code>value</code>属性用于匹配URL映射，<code>value</code>支持简单表达式<code>@RequestMapping(&quot;/user&quot;)</code></li><li><code>@RequestMapping</code>支持使用通配符匹配URL，用于统一映射某些URL规则类似的请求: <code>@RequestMapping(&quot;/getJson/*json&quot;)</code>，当在浏览器中请求&#x2F;getJson&#x2F;a.json或者&#x2F;getJson&#x2F;b.json时都会匹配到后台的Json方法</li><li><code>@RequestMapping</code>的通配符匹配非常简单实用，支持“*” “?” “**”等通配符</li><li>符号“*”匹配任意字符，符号“**”匹配任意路径，符号“?”匹配单个字符</li><li>有通配符的优先级低于没有通配符的，比如&#x2F;user&#x2F;addjson比&#x2F;user&#x2F;*json优先匹配</li><li>有<code>“**”</code>通配符的优先级低于有<code>&quot;*&quot;</code>通配符的</li></ul><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><ul><li><code>@RequestParam</code>将请求参数绑定到控制器的方法参数上，接收的参数来自HTTP请求体或请求url的QueryString，当请求的参数名称与Controller的业务方法参数名称一致时,@RequestParam可以省略</li><li><code>@PathVaraible</code>: 用来处理动态的URL，URL的值可以作为控制器中处理方法的参数</li><li><code>@RequestBody</code>接收的参数是来自requestBody中，即请求体。一般用于外理非Content-Type: application&#x2F;x-www-form-urlencoded编码格式的数据比如: application&#x2F;ison、application&#x2F;xml等类型的数据</li></ul><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p><code>(@RequestParam(value = &quot;nickname&quot;,required = false) String name)</code></p><h4 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h4><ul><li><p>使用IDEA创建Spring Boot项目，会默认创建出classpath:&#x2F;static&#x2F;目录，静态资源一般放在这个目录下即可</p></li><li><p>如果默认的静态资源过滤策略不能满足开发需求，也可以自定义静态资源过滤策略</p></li><li><p>在application.properties中直接定义过滤规则和静态资源位置:</p><p><code>spring.mvc.static-path-pattern=/static/**</code></p><p><code>spring.web.resources.static-locations=classpath:/static/</code></p></li><li><p>过滤规则为&#x2F;static&#x2F;**，静态资源位置为classpath:&#x2F;static&#x2F;</p></li><li><p><img src="C:\Users\86187\AppData\Roaming\Typora\typora-user-images\image-20231016162226573.png" alt="image-20231016162226573"></p></li></ul><h4 id="文件上传原理"><a href="#文件上传原理" class="headerlink" title="文件上传原理"></a>文件上传原理</h4><ul><li>表单的enctype属性规定在发送到服务器之前应该如何对表单数据进行编码</li><li>当表单的enctype&#x3D;”application&#x2F;x-www-form-urlencoded”(默认)时form表单中的数据格式为: key&#x3D;value&amp;key&#x3D;value</li><li>当表单的enctype&#x3D;”multipart&#x2F;form-data”时，其传输数据形式如下<img src="C:\Users\86187\AppData\Roaming\Typora\typora-user-images\image-20231017144329760.png" alt="image-20231017144329760"></li></ul><h4 id="SpirngBoot实现文件上传功能"><a href="#SpirngBoot实现文件上传功能" class="headerlink" title="SpirngBoot实现文件上传功能"></a>SpirngBoot实现文件上传功能</h4><ul><li><p>Spring Boot工程嵌入的tomcat限制了请求的文件大小，每个文件的配置最大为1Mb，单次请求的文件的总数不能大于10Mb。</p></li><li><p>要更改这个默认值需要在配置文件(如application.properties)中加入两个配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.servlet,mu1tipart.max-fiTe-size</span>=<span class="string">10MB</span></span><br><span class="line"><span class="attr">spring.servlet.mu1tipart.max-request-size</span>=<span class="string">10MB</span></span><br></pre></td></tr></table></figure></li><li><p>当表单的enctype&#x3D;”multipart&#x2F;form-data”时,可以使用MultipartFile 获取上传的文件数据，再通过transferTo方法将其写入到磁盘中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestcontroTTer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileContro1ler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UPLOADED_FOLDER</span> <span class="operator">=</span> System.getproperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/upload/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@postMapping(&quot;/up&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> string <span class="title function_">upload</span><span class="params">(string nickname, MultipartFile f)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.printIn(<span class="string">&quot;文件大小:&quot;</span> + f.getsize());</span><br><span class="line">        system.out.printIn(f.getContentType());</span><br><span class="line">        System.out.printn(f.getoriginalFilename());</span><br><span class="line">        System.out.printIn(System.getProperty(<span class="string">&quot;user.dir&quot;</span>));</span><br><span class="line">        saveFile(f);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;上传成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveFile</span><span class="params">(MultipartFile f)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">upDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(UPLOADED_FOLDER);</span><br><span class="line">        <span class="keyword">if</span> (!upDir.exists()) &#123;</span><br><span class="line">            upDir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(UPLOADED_FOLDER + f.getoriginalFilename());</span><br><span class="line">        f.transferTo(file);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>@在<code>RequestMapping(value = @&quot;/uploa&quot;,method = RequestMethod.POST)</code>中需要些POST方法</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  MyBatisPlus依赖  --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.4.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;!--  mysql驱动依赖  --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.47&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;!-- 数据库连接池druid --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.1.28&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>前后端多采用Jason格式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public String query()&#123;</span><br><span class="line">    List&lt;User&gt;  list= userMapper.find();</span><br><span class="line">    System.out.println(list);</span><br><span class="line">    return &quot;查询&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需做出如下更改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public List query()&#123;</span><br><span class="line">    List&lt;User&gt;  list= userMapper.find();</span><br><span class="line">    System.out.println(list);</span><br><span class="line">    return list ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql</title>
      <link href="/2024/05/28/Mysql/"/>
      <url>/2024/05/28/Mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h4 id="DDL定义数据库表结构"><a href="#DDL定义数据库表结构" class="headerlink" title="DDL定义数据库表结构"></a>DDL定义数据库表结构</h4><ol><li><p>创建数据库   <code>CREAT DATABASE 数据库名</code></p></li><li><p>删除数据库   <code>DROP DATABASE 数据库名</code></p></li><li><p>查看数据库   <code>SHOW DATABASE</code> 展示已有数据库</p></li><li><p>创建表           <code>CREAT TABLE 表名</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREAT TABLE 表名 (</span><br><span class="line">列名      数据类型    主键      自增; </span><br><span class="line">    customerID int primary key auto_increment</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><ul><li>创建后可用<code>DESC 表名</code>查看表的结构</li></ul><h4 id="DDL维护数据库表结构"><a href="#DDL维护数据库表结构" class="headerlink" title="DDL维护数据库表结构"></a>DDL维护数据库表结构</h4><ol><li><p>修改表结构DDL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER  TABLE 表名 修改句子 (“修改子句”允许指定多个动作，其动作间使用逗号分隔)</span><br></pre></td></tr></table></figure><p>DROP 删除 ADD 添加 RENAME 重命名 ALTER 修改</p></li></ol><h4 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h4><ul><li>修改数据类型  <code>ALTER TABLE 表名 MODIFY COLUMN 修改数据的字段名 数据类型</code> column表示列</li><li>修改字段          <code>ALTER TABLE 表名 RENAME COLUMN 旧字段名 TO 新字段名 </code></li><li>添加字段         <code>ALTER TABLE 表名 ADD COLUMN 字段名 数据类型</code></li><li>删除字段          <code>ALTER TABLE 表名 DROP COLUMN 字段名</code></li><li>删除整表          <code>DROP TABLE 表名</code></li></ul><h4 id="DML-增删改查"><a href="#DML-增删改查" class="headerlink" title="DML 增删改查"></a>DML 增删改查</h4><ul><li><p>INSERT 插入数据</p><ul><li><pre><code class="mysql"></code></pre></li></ul><p>  INSERT INTO 表名 (id,name,level,exp,gold) VALUES(1,”张三”,’1’,’1’,’1’ 具体的值)</p><p>  ID可设null为空自增 INSERT 可一次性插入多条数据</p><p>  INSERT INTO 表名 (id,name,level) VALUES(1,”张三”,2,3,4),<br>  VALUES(NULL,”张三”,’3’,’5’,’7’),<br>  VALUES(NULL,”张三”,’3’,’5’,’7’),<br>  VALUES(NULL,”张三”,’2’,’6’,’9’)<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">      括号里为column列的值 若不写括号内容 则VALUES里的值会按照默认位置进行填充</span><br><span class="line"></span><br><span class="line">- SELECT 查询数据</span><br><span class="line"></span><br><span class="line">    - ```mysql</span><br><span class="line">    SELECT * FORM 表名      //*号代替所有的列</span><br><span class="line">    也可</span><br><span class="line">    SELECT &lt;COLUMN1, COLUMN2, COLUMN3...&gt; FORM 表名 </span><br></pre></td></tr></table></figure></p><pre><code>注:必须的子句只有 select 子句和 from 子句。</code></pre></li><li><p>UPDATE 修改数据</p><ul><li><pre><code class="mysql"></code></pre></li></ul><p>  UPDATE 表名 SET 修改的列名 值 &#x3D; WHERE &#x3D; ‘  ‘;</p><p>  UPDATE 表名 SET height 189 &#x3D; WHERE &#x3D; ‘李斯特’;    &#x2F;&#x2F;把李斯特同学的身高改为189</p><p>  UPDATE 表名 set height &#x3D; 0,id &#x3D; 0;      &#x2F;&#x2F;修改多个值去掉WHERE 实际开发中不加 WHERE 是非常危险的行为<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- DELETE 删除数据</span><br><span class="line"></span><br><span class="line">    - ```mysql</span><br><span class="line">    DELETE FORM 表名 WHERE XXX = 0;</span><br></pre></td></tr></table></figure></p></li></ul><h2 id="常用语句-WHERE-AND-OR-NOT-IN-NULL-LIKE"><a href="#常用语句-WHERE-AND-OR-NOT-IN-NULL-LIKE" class="headerlink" title="常用语句 WHERE AND OR NOT IN NULL LIKE"></a>常用语句 WHERE AND OR NOT IN NULL LIKE</h2><ul><li><p>WHERE 提取满足指定标准的记录 可同 UPDATE SELECT 一起使用</p><ul><li><pre><code class="mysql"></code></pre></li></ul><p>  SELECT * FORM player WHERE level &#x3D; 1;<br>  查找等级为1的玩家</p><blockquote><p>&lt; &#x3D; &gt;&#x3D; &lt;&#x3D;  !&#x3D;都可使用<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- AND 连接</span><br><span class="line"></span><br><span class="line">    - ```mysql</span><br><span class="line">    SELECT * FORM player WHERE level &gt; 1 AND  level &lt; 5;</span><br><span class="line">    查找等级大于1小于5的玩家</span><br></pre></td></tr></table></figure></p></blockquote></li><li><p>OR 或者</p></li><li><p>NOT 取反 可以加在任何条件语句当中</p></li></ul><p>同时用优先级NOT&gt;AND&gt;OR</p><ul><li><p>IN 多个定值</p></li><li><pre><code class="mysql">SELECT * FROM player WHERE level IN(1,2,3);//选取值为 1 2 3的参数<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- NULL 空</span><br><span class="line"></span><br><span class="line">    - ```mysql</span><br><span class="line">    SELECT * FROM player WHERE email IS NULL; // 查找email为空的列表</span><br><span class="line">    </span><br><span class="line">    SELECT * FROM player WHERE email IS NOT NULL; // 查找email不为空的列表</span><br></pre></td></tr></table></figure></code></pre></li><li><p>LIKE 模糊查询</p><ul><li><pre><code class="mysql"></code></pre></li></ul><p>  SELECT * FROM player WHERE name LIKE ‘王%’;   &#x2F;&#x2F;查找name为王的人</p><p>  SELECT * FROM player WHERE name LIKE ‘<em>王</em>‘; &#x2F;&#x2F;查找第二个字为王的name</p><p>  SELECT * FROM player WHERE name LIKE ‘王_’  &#x2F;&#x2F;查找name为王X的两字name</p><p>  SELECT * FROM player WHERE name LIKE ‘王_ _’  &#x2F;&#x2F;查找name为王XX的三字name</p><p>  SELECT * FROM player WHERE name LIKE ‘%王%’  &#x2F;&#x2F;查找名字中包含王的name</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">      %任意个字符  _任意一个字符</span><br><span class="line"></span><br><span class="line">- ROUND 四舍五入</span><br><span class="line"></span><br><span class="line">- AS 别名</span><br><span class="line"></span><br><span class="line">- UNIQUE 唯一</span><br><span class="line"></span><br><span class="line">- REGEXP 正则表达式 可以使用通配符定义匹配规则</span><br><span class="line"></span><br><span class="line">    - ###### 常用通配符</span><br><span class="line"></span><br><span class="line">        - .  匹配任意一个字符</span><br><span class="line">        - ^ 匹配开头</span><br><span class="line">        - $ 匹配结尾</span><br><span class="line">        - [abc] 匹配其中任意一个字符</span><br><span class="line">        - [a-z] 匹配范围内的任意一个字符or[0-9]</span><br><span class="line">        - A|B 匹配A或者B</span><br><span class="line"></span><br><span class="line">    - ```mysql</span><br><span class="line">    SELECT * FROM player WHERE name REGEXP &#x27;^王.$&#x27;  //查找name为王X的name</span><br></pre></td></tr></table></figure></li><li><p>BETWEEN…AND…  条件连接</p><ul><li><pre><code class="mysql"></code></pre></li></ul><p>  SELECT * FROM player WHERE level BETWEEN 1 AND 10;<br>  查找level属性1-10的参数<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ORDER BY 排序</span><br><span class="line"></span><br><span class="line">    - ```mysql</span><br><span class="line">    SELECT * FROM player ORDER BY level;  //按照level升序排列 默认</span><br><span class="line">    </span><br><span class="line">    SELECT * FROM player ORDER BY level DESC;  //按照level降序排列</span><br><span class="line">    </span><br><span class="line">    SELECT * FROM player ORDER BY level DESC,exp ASC;  //按照level降序排列 exp升序排列 不填为默认</span><br><span class="line">    </span><br><span class="line">    SELECT * FROM player ORDER BY 5 DESC;  //第五列按照降序排列</span><br></pre></td></tr></table></figure></p></li><li><p>PRIMARY KEY 主键</p></li><li><p>AUTO_INCREMENT</p></li><li><p>COMMENT</p></li><li><p>DEFAULT 默认值</p></li></ul><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><ul><li><p><code>AVG()</code> 返回集合的平均数</p><ul><li><pre><code class="mysql"></code></pre></li></ul><p>  SELECT AVG(集合名) FORM player;</p><p>  SELECT AVG(level) FORM player; 返回level的平均数</p><p>  SELECT * FROM player WHERE level &gt; (SELECT AVG(level) FORM player);    &#x2F;&#x2F;查找大于平均数的数据<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- `COUNT()` 返回集合中的项目</span><br><span class="line"></span><br><span class="line">- `MAX()` 返回最大值</span><br><span class="line"></span><br><span class="line">- `MIN()` 返回最小值</span><br><span class="line"></span><br><span class="line">- `SUM()` 求和</span><br><span class="line"></span><br><span class="line">#### GROUP BY: 分组（分组查询）</span><br><span class="line"></span><br><span class="line">```MYSQL</span><br><span class="line">SELECT sex,COUNT(*) FROM player GROUP BY sex;</span><br><span class="line">SELECT level,COUNT(level) FROM player GROUP BY lever;</span><br></pre></td></tr></table></figure></p></li></ul><h4 id="LIMIT-限制数量"><a href="#LIMIT-限制数量" class="headerlink" title="LIMIT:限制数量"></a>LIMIT:限制数量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LIMIT 3</span><br><span class="line">LIMIT 3,3//表示偏移量 4-6位</span><br></pre></td></tr></table></figure><h4 id="DISTINCT-去重"><a href="#DISTINCT-去重" class="headerlink" title="DISTINCT:去重"></a>DISTINCT:去重</h4><h4 id="UNION-合并查询结果集-并集"><a href="#UNION-合并查询结果集-并集" class="headerlink" title="UNION:合并查询结果集(并集)"></a>UNION:合并查询结果集(并集)</h4><ul><li>合并两个查询结果 会默认去掉重复内容 两者都有 可加ALL  UNION ALL</li></ul><h4 id="INTERSECT-交集"><a href="#INTERSECT-交集" class="headerlink" title="INTERSECT:(交集)"></a>INTERSECT:(交集)</h4><h4 id="EXCEPT-合并结果集-差集"><a href="#EXCEPT-合并结果集-差集" class="headerlink" title="EXCEPT:合并结果集(差集)"></a>EXCEPT:合并结果集(差集)</h4><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>用来提升查询效率的数据结构 可以帮助我们快速定位到想要查询的结构</p><h4 id="CREATE-INDEX-创建索引"><a href="#CREATE-INDEX-创建索引" class="headerlink" title="CREATE INDEX 创建索引"></a>CREATE INDEX 创建索引</h4><ul><li>INDEX前面可加上可选的索引类型 <code>[UNIQUE|FULLTEXT|SPATIAL]</code>唯一 全文 空间</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM player;</span><br><span class="line"></span><br><span class="line">CREATE INDEX [UNIQUE|FULLTEXT|SPATIAL] INDEX 索引名称 ON 表名 (index_col_name...) </span><br><span class="line">                                                      在这张表上   对哪些字段进行索引</span><br></pre></td></tr></table></figure><h4 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h4><ul><li><pre><code class="mysql">SHOW INDEX FROM fast<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 删除索引</span><br><span class="line"></span><br><span class="line">- ```mysql</span><br><span class="line">  DROP INDEX 索引名称 ON 表名</span><br></pre></td></tr></table></figure></code></pre></li></ul><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>创建视图：CREATE VIEW 视图名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW top10</span><br><span class="line">AS</span><br><span class="line">SELECT * FROM player ORDER BY level DESC LIMIT 10;</span><br><span class="line">查询表player数据库中level数据前10名的数据</span><br></pre></td></tr></table></figure><p>表中的数据发生变化时 视图也会变化</p><h4 id="数据库导入导出"><a href="#数据库导入导出" class="headerlink" title="数据库导入导出"></a>数据库导入导出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -h IP -u 用户名 -p -d 数据库名 &gt; 导出的文件名</span><br><span class="line"></span><br><span class="line">参数解析：</span><br><span class="line">-h:表示host地址</span><br><span class="line">-u:表示user用户</span><br><span class="line">-p:表示password密码</span><br><span class="line">-d:表示不导出数据</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">（1）-p 后面不能加password，只能单独输入数据库名称</span><br><span class="line">（2）mysqldump是在cmd下的命令，不能再mysql下面，即不能进入mysql的（如果进入了mysql，得exit退出mysql后才可以的。）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">source C:\Users\Administrator\Desktop\users2.sql</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Mysql-数据类型"><a href="#Mysql-数据类型" class="headerlink" title="Mysql 数据类型"></a>Mysql 数据类型</h4><ul><li><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5></li></ul><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1 Bytes</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 Bytes</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 Bytes</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left">INT或INTEGER</td><td align="left">4 Bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8 Bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left">FLOAT</td><td align="left">4 Bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="left">DOUBLE</td><td align="left">8 Bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="left">依赖于M和D的值 （10，2）10位数，2小数点</td><td align="left">依赖于M和D的值</td><td align="left">小数值</td></tr></tbody></table><ul><li><h5 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h5></li></ul><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01&#x2F;9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’&#x2F;‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901&#x2F;2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</td><td align="left">YYYY-MM-DD hh:mm:ss</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-19 03:14:07’ UTC结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYY-MM-DD hh:mm:ss</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><ul><li><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5></li></ul><table><thead><tr><th align="center">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="center">CHAR</td><td align="left">0-255 bytes</td><td align="left">定长字符串</td></tr><tr><td align="center">VARCHAR</td><td align="left">0-65535 bytes</td><td align="left">变长字符串</td></tr><tr><td align="center">TINYBLOB</td><td align="left">0-255 bytes</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="center">TINYTEXT</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="center">BLOB</td><td align="left">0-65 535 bytes</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="center">TEXT</td><td align="left">0-65 535 bytes</td><td align="left">长文本数据</td></tr><tr><td align="center">MEDIUMBLOB</td><td align="left">0-16 777 215 bytes</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="center">MEDIUMTEXT</td><td align="left">0-16 777 215 bytes</td><td align="left">中等长度文本数据</td></tr><tr><td align="center">LONGBLOB</td><td align="left">0-4 294 967 295 bytes</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="center">LONGTEXT</td><td align="left">0-4 294 967 295 bytes</td><td align="left">极大文本数据</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java需要面试掌握的技术栈</title>
      <link href="/2024/05/27/Java/"/>
      <url>/2024/05/27/Java/</url>
      
        <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><ol><li>什么是Java中的多态性（Polymorphism）？</li><li>Java的异常处理机制以及try-catch-finally块的作用。</li><li>什么是Java中的线程（Thread）？Java中线程的生命周期吗？</li><li>你了解Java中的反射（Reflection）吗？反射的主要用途是什么？</li></ol><p>面试Java开发岗位时，通常需要掌握以下技术栈：</p><ol><li><strong>Java核心技术</strong>：熟练掌握Java语言的基本语法、面向对象编程（OOP）、异常处理、集合框架等基础知识。</li><li><strong>数据库</strong>：熟悉关系型数据库（如MySQL、Oracle、PostgreSQL）以及至少一种NoSQL数据库（如MongoDB、Redis）的使用和基本操作，能够编写SQL语句进行数据操作，了解数据库设计和优化。</li><li><strong>Spring框架</strong>：掌握Spring框架的核心模块，包括Spring Core、Spring MVC、Spring Boot等，能够使用Spring进行项目的依赖注入、AOP编程、事务管理等。</li><li><strong>Spring Boot</strong>：熟悉Spring Boot框架，能够快速搭建和开发基于Spring Boot的应用程序，并了解Spring Boot的自动配置、起步依赖等特性。</li><li><strong>ORM框架</strong>：熟悉至少一种ORM（Object-Relational Mapping）框架，如Hibernate、MyBatis等，能够使用ORM框架简化数据库操作，提高开发效率。</li><li><strong>Web开发</strong>：了解HTTP协议、Servlet规范，熟悉常用的Web开发技术，如HTML、CSS、JavaScript，以及常用 的前端框架如Angular、React、Vue等。</li><li><strong>微服务架构</strong>：了解微服务架构的概念和原理，熟悉Spring Cloud等微服务框架，能够构建和部署基于微服务的分布式系统。</li><li><strong>版本控制工具</strong>：熟练使用版本控制工具如Git，能够进行代码的版本管理和团队协作。</li><li><strong>测试</strong>：熟悉单元测试、集成测试、端到端测试等各种测试方法，掌握JUnit等测试框架的使用。</li><li><strong>容器化技术</strong>：了解Docker、Kubernetes等容器化技术，能够使用容器化技术进行应用的部署和管理。</li><li><strong>消息队列</strong>：了解消息队列的概念和常见的消息中间件，如RabbitMQ、Kafka等，能够使用消息队列实现异步消息处理。</li><li><strong>安全</strong>：了解常见的Web安全问题，如跨站脚本攻击（XSS）、SQL注入等，能够进行安全意识培训和代码安全审查。</li></ol><p>面试Java运维岗位时，通常需要掌握以下技术栈：</p><ol><li><p><strong>操作系统</strong>：熟悉Linux系统的基本操作和常用命令，包括文件管理、进程管理、用户权限管理等。</p></li><li><p><strong>网络和安全</strong>：了解网络原理和常见网络协议，熟悉TCP&#x2F;IP协议栈，能够进行网络故障排查和调优。同时需要了解网络安全基础知识，包括防火墙、安全策略、SSL&#x2F;TLS等。</p></li><li><p><strong>容器化技术</strong>：熟悉Docker和Kubernetes等容器化技术，能够使用容器部署和管理应用程序，实现快速部署和扩展。</p></li><li><p><strong>自动化运维工具</strong>：熟练使用自动化运维工具，如Ansible、Puppet、Chef等，能够进行系统配置管理、软件部署和任务自动化。</p></li><li><p><strong>监控和日志</strong>：掌握监控系统的搭建和配置，熟悉常用监控工具如Prometheus、Grafana等，能够监控系统性能和应用运行状态。同时需要熟悉日志管理，包括日志收集、存储和分析等。</p></li><li><p><strong>云平台</strong>：了解常见的云计算平台，如AWS、Azure、阿里云等，能够在云平台上部署和管理Java应用程序。</p></li><li><p><strong>数据库管理</strong>：熟悉关系型数据库和NoSQL数据库的安装、配置和优化，能够进行数据库备份、恢复和性能调优。</p></li><li><p><strong>故障排查和性能调优</strong>：具备故障排查和性能调优的能力，能够快速定位和解决系统故障和性能瓶颈。</p></li><li><p><strong>持续集成和持续部署</strong>：了解持续集成和持续部署的流程和工具，能够搭建和管理持续集成和持续部署的环境。</p></li><li><p><strong>安全和备份</strong>：了解系统安全的基本原理和常见攻击手法，能够进行安全漏洞扫描和修复。同时需要具备数据备份和恢复的能力，确保数据的安全性和可靠性。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2024/05/27/Mybatis/"/>
      <url>/2024/05/27/Mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="一-什么是Mybatis？"><a href="#一-什么是Mybatis？" class="headerlink" title="一.什么是Mybatis？"></a>一.什么是Mybatis？</h2><ol><li>Mybatis是一款优秀的<code>持久层</code> <code>框架</code>，用于简化JDBC开发</li><li>Mybatis本是Apache的开源项目iBatis。2013年11月迁移到Github</li><li>官网:<a href="https://mybatis.org/mybatis-3/ja/index.html">https://mybatis.org/mybatis-3/ja/index.html</a></li></ol><ul><li><h4 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h4><ul><li>负责将数据保存到数据库的代码</li><li>JavaEE三层架构:表现层，业务层，<code>持久层</code>：数据持久化</li></ul></li><li><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><ul><li>半成品软件，是一套可重用的，通用的，软件基础代码模型</li><li>在框架的基础上构建软件编写更加高效，规范，通用，可扩展</li></ul></li><li><p>为什么要简化JDBC</p></li><li><p><img src="/../image/image-20240327224631428.png" alt="image-20240327224631428"></p></li><li><p>JDBC缺点</p><ul><li><p>硬编码</p><ul><li>注册驱动 获取连接 SQL语句</li></ul></li><li><p>操作繁琐</p><ul><li>手动设置参数 手动封装结果集</li></ul></li></ul></li><li><p>Mybatis把注册驱动等一系列硬编码功能添加到配置文件<code>mybattis-config.xml</code>中</p></li></ul><p><img src="/../image/image-20240328162832867.png" alt="image-20240328162832867"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios网络请求</title>
      <link href="/2024/05/26/Axios%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
      <url>/2024/05/26/Axios%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="Axios网络请求"><a href="#Axios网络请求" class="headerlink" title="Axios网络请求"></a>Axios网络请求</h1><p>Axios 是一个基于 <em><a href="https://javascript.info/promise-basics">promise</a></em> 网络请求库，作用于<a href="https://nodejs.org/"><code>node.js</code></a> 和浏览器中。 它是 <em><a href="https://www.lullabot.com/articles/what-is-an-isomorphic-application">isomorphic</a></em> 的(即同一套代码可以运行在浏览器和node.js中)。在服务端它使用原生 node.js <code>http</code> 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。</p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul><li>从浏览器创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>超时处理</li><li>查询参数序列化支持嵌套项处理</li><li>自动将请求体序列化为：<ul><li>JSON (<code>application/json</code>)</li><li>Multipart &#x2F; FormData (<code>multipart/form-data</code>)</li><li>URL encoded form (<code>application/x-www-form-urlencoded</code>)</li></ul></li><li>将 HTML Form 转换成 JSON 进行请求</li><li>自动转换JSON数据</li><li>获取浏览器和 node.js 的请求进度，并提供额外的信息（速度、剩余时间）</li><li>为 node.js 设置带宽限制</li><li>兼容符合规范的 FormData 和 Blob（包括 node.js）</li><li>客户端支持防御<a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">XSRF</a></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>使用 npm:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><h1 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h1><h3 id="为什么会出现跨域问题？"><a href="#为什么会出现跨域问题？" class="headerlink" title="为什么会出现跨域问题？"></a>为什么会出现跨域问题？</h3><ul><li>为了保证浏览器的安全，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源，称为同源策略，同源策略是浏览器安全的基石</li><li>同源策略(Sameoriginpolicy)是一种约定，它是浏览器最核心也最基本的安全功能</li><li>所谓同源(即指在同一个域)就是两个页面具有相同的协议(protocol)，主机(host)和端口号(port)</li><li>当一个请求url的协议、域名、端口三者之间任意一个与当前页面ur!不同即为跨域，，此时无法读取非同源网页的 Cookie，无法向非同源地址发送 AJAX 请求</li></ul><h3 id="怎么解决跨域问题？"><a href="#怎么解决跨域问题？" class="headerlink" title="怎么解决跨域问题？"></a>怎么解决跨域问题？</h3><ul><li>跨源资源共享(CrossSource Resource共享)是由W3C制定的一种跨域资源共享技术标准，其目的就是为了解决前端的跨域请求。</li><li>CORS可以在不破坏即有规则的情况下，通过后端服务器实现CORS接口，从而实现跨域通信。</li><li>科拉斯将请求分为两类:<code>简单请求</code>和<code>非简单请求</code>，分别对跨域通信提供了支持。</li></ul><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><p>满足以下条件的请求即为简单请求:</p><ul><li>请求方法:GET、POST、HEAD</li><li>除了以下的请求头字段之外，没有自定义的请求头:<br>Accept、Accept-Language、Content-Language、Last-Event-lD.Content-Type</li><li>Content-Type的值只有以下三种:<br>text&#x2F;plain、multipart&#x2F;form-data、 application&#x2F;x-www-form-urlencoded</li></ul><h4 id="简单请求的服务器处理"><a href="#简单请求的服务器处理" class="headerlink" title="简单请求的服务器处理"></a>简单请求的服务器处理</h4><ul><li><p>对于简单请求，CORS的策略是请求时在请求头中增加一个Origin字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host:localhost:<span class="number">8080</span></span><br><span class="line">Origin:http:<span class="comment">//localhost:8081</span></span><br><span class="line">Referer:http:<span class="comment">//localhost:8081/index.html</span></span><br></pre></td></tr></table></figure></li><li><p>服务器收到请求后，根据该字段判断是否允许该请求访问，如果允许，则在HTTP头信息中添加Access-Control-Alow-Origin字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-0rigin:http:<span class="comment">//localhost:8081</span></span><br><span class="line">Content-Length:<span class="number">20</span></span><br><span class="line">Content-Type:text/plain;charset=UTF-<span class="number">8</span></span><br><span class="line">Date:Thu,<span class="number">12</span> Jul2018 <span class="number">12</span>:<span class="number">51</span>:<span class="number">14</span> GMT</span><br></pre></td></tr></table></figure></li></ul><h4 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h4><ul><li><p>对于非简单请求的跨源请求，浏览器会在真实请求发出前增加一次OPTION请求，称为预检请求(preflight request)</p></li><li><p>预检请求将真实请求的信息，包括请求方法、自定义头字段、源信息添加到HTTP头信息字段中，询问服务器是否允许这样的操作。</p></li><li><p>例如一个GET请求:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS /test HTTP/<span class="number">1.1</span></span><br><span class="line">Origin:http:<span class="comment">//www.test.com</span></span><br><span class="line">Access-Control-Request-Method:GET</span><br><span class="line">Access-Control-Request-Headers:X-Custom-Header</span><br><span class="line">Host:www.test.com</span><br></pre></td></tr></table></figure></li><li><p>Access-Control-Request-Method表示请求使用的HTTP方法，Access-Control-Request-Headers包含请求的自定义头字段</p></li></ul><h4 id="在Spring-Boot中配置CORS"><a href="#在Spring-Boot中配置CORS" class="headerlink" title="在Spring Boot中配置CORS"></a>在Spring Boot中配置CORS</h4><p>后端可<code>加个@CrossOrigin注解</code>对单个Controller进行放行</p><p>在传统的Java EE开发中，可以通过过滤器统一配置，而Spring Boot中对此则提供了更加简洁的解决方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)  <span class="comment">// 允许跨域访问的路径</span></span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)  <span class="comment">// 允许跨域访问的源</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;GET&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>, <span class="string">&quot;DELETE&quot;</span>)  <span class="comment">// 允许请求方法</span></span><br><span class="line">                .maxAge(<span class="number">168000</span>)  <span class="comment">// 预检间隔时间</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)  <span class="comment">// 允许头部设置</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>);  <span class="comment">// 是否发送cookie</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端接受后端请求"><a href="#前端接受后端请求" class="headerlink" title="前端接受后端请求"></a>前端接受后端请求</h4><p>在前端代码中，有众多功能需要访问后端代码，若对每个代码都进行单独设置会十分繁琐<br>所以可以通过axios进行整合</p><h4 id="与Vue整合"><a href="#与Vue整合" class="headerlink" title="与Vue整合"></a>与Vue整合</h4><ul><li><p>在实际项目开发中，几乎每个组件中都会用到 axios发起数据请求。此时会遇到如下两个问题:</p></li><li><p>每个组件中都需要导入 axios</p></li><li><p>每次发请求都需要填写完整的请求路径</p></li><li><p>可以通过全局配置的方式解决上述问题:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置请求根路径</span></span><br><span class="line">axios .<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://api.com</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//将axios作为全局的自定义属性，每个组件可以在内部直接访问(Vue3)</span></span><br><span class="line"><span class="string">app.config.globalProperties.$http=axios</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//将axios作为全局的自定义属性，每个组件可以在内部直接访问(Vue2)</span></span><br><span class="line"><span class="string">Vue.prototype.$http=axios</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://nigzla.github.io//blog/2024/05/26/Axios%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/Axios.png" alt="Axios"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&quot;http://localhost:9091&quot;</span><span class="comment">//这是示例，需要根据自己端口号进行更改</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$http</span> = axios;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/brands&#x27;</span>)<span class="comment">//用$http代替</span></span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">tableData</span> = response.<span class="property">data</span>;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel基本数学函数</title>
      <link href="/2024/05/26/excel/"/>
      <url>/2024/05/26/excel/</url>
      
        <content type="html"><![CDATA[<h3 id="Excel基本数学函数"><a href="#Excel基本数学函数" class="headerlink" title="Excel基本数学函数"></a>Excel基本数学函数</h3><ol><li><p><strong>SUM</strong>：求和</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">SUM</span>(<span class="symbol">A1</span>:<span class="symbol">A5</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 到 A5 分别为 1, 2, 3, 4, 5，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure></li><li><p><strong>AVERAGE</strong>：平均值</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">AVERAGE</span>(<span class="symbol">A1</span>:<span class="symbol">A5</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 到 A5 分别为 1, 2, 3, 4, 5，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure></li><li><p><strong>MIN</strong>：最小值</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">MIN</span>(<span class="symbol">A1</span>:<span class="symbol">A5</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 到 A5 分别为 1, 2, 3, 4, 5，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p><strong>MAX</strong>：最大值</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">MAX</span>(<span class="symbol">A1</span>:<span class="symbol">A5</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 到 A5 分别为 1, 2, 3, 4, 5，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure></li><li><p><strong>COUNT</strong>：计数</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">COUNT</span>(<span class="symbol">A1</span>:<span class="symbol">A5</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 到 A5 分别为 1, 2, 3, 4, 5，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure></li></ol><h3 id="逻辑函数"><a href="#逻辑函数" class="headerlink" title="逻辑函数"></a>逻辑函数</h3><ol><li><p><strong>IF</strong>：条件判断</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">IF</span>(<span class="symbol">A1</span> &gt; <span class="number">10</span>, <span class="string">&quot;大于10&quot;</span>, <span class="string">&quot;小于等于10&quot;</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 为 15，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大于10</span><br></pre></td></tr></table></figure></li><li><p><strong>AND</strong>：逻辑与</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">AND</span>(<span class="symbol">A1</span> &gt; <span class="number">10</span>, <span class="symbol">B1</span> &lt; <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 为 15，B1 为 18，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUE</span><br></pre></td></tr></table></figure></li><li><p><strong>OR</strong>：逻辑或</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">OR</span>(<span class="symbol">A1</span> &gt; <span class="number">10</span>, <span class="symbol">B1</span> &lt; <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 为 8，B1 为 18，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUE</span><br></pre></td></tr></table></figure></li><li><p><strong>NOT</strong>：逻辑非</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">NOT</span>(<span class="symbol">A1</span> &gt; <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 为 8，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUE</span><br></pre></td></tr></table></figure></li></ol><h3 id="查找与引用函数"><a href="#查找与引用函数" class="headerlink" title="查找与引用函数"></a>查找与引用函数</h3><ol><li><p><strong>VLOOKUP</strong>：垂直查找</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">VLOOKUP</span>(<span class="symbol">B1</span>, <span class="symbol">A1</span>:<span class="symbol">C10</span>, <span class="number">3</span>, <span class="built_in">FALSE</span>)</span><br></pre></td></tr></table></figure><p>假设 B1 为 2，A1:C10 为以下数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1   A   X</span><br><span class="line">2   B   Y</span><br><span class="line">3   C   Z</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Y</span><br></pre></td></tr></table></figure></li><li><p><strong>HLOOKUP</strong>：水平查找</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">HLOOKUP</span>(<span class="symbol">B1</span>, <span class="symbol">A1</span>:<span class="symbol">F3</span>, <span class="number">2</span>, <span class="built_in">FALSE</span>)</span><br></pre></td></tr></table></figure><p>假设 B1 为 2，A1:F3 为以下数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1   2   3   4   5   6</span><br><span class="line">A   B   C   D   E   F</span><br><span class="line">X   Y   Z   W   V   U</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B</span><br></pre></td></tr></table></figure></li><li><p><strong>INDEX</strong>：索引</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">INDEX</span>(<span class="symbol">A1</span>:<span class="symbol">C3</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>假设 A1:C3 为以下数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1   2   3</span><br><span class="line">4   5   6</span><br><span class="line">7   8   9</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure></li><li><p><strong>MATCH</strong>：匹配</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">MATCH</span>(<span class="symbol">B1</span>, <span class="symbol">A1</span>:<span class="symbol">A5</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>假设 B1 为 3，A1:A5 为 1, 2, 3, 4, 5，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure></li><li><p><strong>OFFSET</strong>：偏移</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">OFFSET</span>(<span class="symbol">A1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>假设 A1:B3 为以下数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1   2</span><br><span class="line">3   4</span><br><span class="line">5   6</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure></li></ol><h3 id="文本函数"><a href="#文本函数" class="headerlink" title="文本函数"></a>文本函数</h3><ol><li><p><strong>CONCATENATE</strong>：连接文本</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">CONCATENATE</span>(<span class="symbol">A1</span>, <span class="symbol">B1</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 为 “Hello” ，B1 为 “World”，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HelloWorld</span><br></pre></td></tr></table></figure></li><li><p><strong>CONCAT</strong>：连接文本</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">CONCAT</span>(<span class="symbol">A1</span>, <span class="symbol">B1</span>, <span class="symbol">C1</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 为 “Hello”，B1 为 “ “, C1 为 “World”，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure></li><li><p><strong>TEXTJOIN</strong>：连接文本并使用分隔符</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">TEXTJOIN</span>(<span class="string">&quot;, &quot;</span>, <span class="built_in">TRUE</span>, <span class="symbol">A1</span>:<span class="symbol">C1</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 为 “Hello”，B1 为 “World”，C1 为 “!”, 结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, World, !</span><br></pre></td></tr></table></figure></li><li><p><strong>LEFT</strong>：左侧文本提取</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">LEFT</span>(<span class="symbol">A1</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 为 “Hello”，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hel</span><br></pre></td></tr></table></figure></li><li><p><strong>RIGHT</strong>：右侧文本提取</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">RIGHT</span>(<span class="symbol">A1</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 为 “Hello”，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llo</span><br></pre></td></tr></table></figure></li><li><p><strong>MID</strong>：中间文本提取</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">MID</span>(<span class="symbol">A1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 为 “Hello”，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ell</span><br></pre></td></tr></table></figure></li><li><p><strong>LEN</strong>：文本长度</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">LEN</span>(<span class="symbol">A1</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 为 “Hello”，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure></li><li><p><strong>TRIM</strong>：去除多余空格</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">TRIM</span>(<span class="symbol">A1</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 为 “ Hello World “，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure></li></ol><h3 id="日期与时间函数"><a href="#日期与时间函数" class="headerlink" title="日期与时间函数"></a>日期与时间函数</h3><ol><li><p><strong>TODAY</strong>：当前日期</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">TODAY</span>()</span><br></pre></td></tr></table></figure><p>假设今天是 2024 年 5 月 23 日，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2024-05-23</span><br></pre></td></tr></table></figure></li><li><p><strong>NOW</strong>：当前日期和时间</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">NOW</span>()</span><br></pre></td></tr></table></figure><p>假设当前时间为 2024 年 5 月 23 日 14:30，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2024-05-23 14:30</span><br></pre></td></tr></table></figure></li><li><p><strong>DATE</strong>：日期</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">DATE</span>(<span class="number">2024</span>, <span class="number">5</span>, <span class="number">23</span>)</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2024-05-23</span><br></pre></td></tr></table></figure></li><li><p><strong>YEAR</strong>：年份</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">YEAR</span>(<span class="symbol">A1</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 为 “2024-05-23”，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2024</span><br></pre></td></tr></table></figure></li><li><p><strong>MONTH</strong>：月份</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">MONTH</span>(<span class="symbol">A1</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 为 “2024-05-23”，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure></li><li><p><strong>DAY</strong>：日期</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">DAY</span>(<span class="symbol">A1</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 为 “2024-05-23”，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">23</span><br></pre></td></tr></table></figure></li></ol><h3 id="财务函数"><a href="#财务函数" class="headerlink" title="财务函数"></a>财务函数</h3><ol><li><p><strong>PMT</strong>：计算贷款的每期付款金额</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">PMT</span>(<span class="number">0.05</span>/<span class="number">12</span>, <span class="number">60</span>, -<span class="number">10000</span>)</span><br></pre></td></tr></table></figure><p>假设年利率为 5%，分 60 期（5 年），贷款总额为 10000 元，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">188.71</span><br></pre></td></tr></table></figure></li><li><p><strong>FV</strong>：计算未来值</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">FV</span>(<span class="number">0.05</span>/<span class="number">12</span>, <span class="number">60</span>, -<span class="number">188.71</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>假设每月存入 188.71 元，年利率 5%，分 60 期，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10000</span><br></pre></td></tr></table></figure></li></ol><h3 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数"></a>统计函数</h3><ol><li><p><strong>MEDIAN</strong>：中位数</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">MEDIAN</span>(<span class="symbol">A1</span>:<span class="symbol">A5</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 到 A5 分别为 1, 2, 3, 4, 5，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure></li><li><p><strong>MODE</strong>：众数</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">MODE</span>(<span class="symbol">A1</span>:<span class="symbol">A5</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 到 A5 分别为 1, 2</p></li></ol><p>, 2, 3, 4，结果为：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure></p><ol start="3"><li><strong>STDEV</strong>：标准差<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">STDEV</span>(<span class="symbol">A1</span>:<span class="symbol">A5</span>)</span><br></pre></td></tr></table></figure>假设 A1 到 A5 分别为 1, 2, 3, 4, 5，结果为：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.58</span><br></pre></td></tr></table></figure></li></ol><h3 id="信息函数"><a href="#信息函数" class="headerlink" title="信息函数"></a>信息函数</h3><ol><li><p><strong>ISNUMBER</strong>：判断是否为数字</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">ISNUMBER</span>(<span class="symbol">A1</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 为 123，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUE</span><br></pre></td></tr></table></figure></li><li><p><strong>ISBLANK</strong>：判断是否为空</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">ISBLANK</span>(<span class="symbol">A1</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 为空单元格，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUE</span><br></pre></td></tr></table></figure></li><li><p><strong>ISTEXT</strong>：判断是否为文本</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">ISTEXT</span>(<span class="symbol">A1</span>)</span><br></pre></td></tr></table></figure><p>假设 A1 为 “Hello”，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUE</span><br></pre></td></tr></table></figure></li></ol><p>这些示例展示了每个函数和公式在 Excel 中的实际应用及其结果。通过这些示例，你可以更好地理解如何使用这些函数来处理各种数据。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
